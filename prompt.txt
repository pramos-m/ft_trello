ahora que ya conoces mi backend, que los archivos importantes son estos:
main.js
import express from "express";
import index from "./routes/index.js"
import session from "express-session";
import passport from "./middleware/passport.js"; // Importaremos la configuración de passport

const { PORT = 3001 } = process.env;
const app = express();

// Configuración de session antes de passport
app.use(session({
    secret: process.env.SESSION_SECRET || 'Mi3str1ng_S3cr3t0_L4rg0_Y_C0mpl3j0_2024',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: process.env.NODE_ENV === 'production',
        maxAge: 24 * 60 * 60 * 1000 // 24 horas
    }
}));

// Inicializar passport
app.use(passport.initialize());
app.use(passport.session());

app.use(express.json());
app.use("/", index);

app.use((err, req, res, next) => {
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};
    res.status(err.status || 500);
    res.send("Uh oh! An unexpected error occured.");
})

app.listen(PORT, () => {
    console.log(`Server listening on port ${PORT}`);
});

index.js:
import express from "express";
import passport from 'passport';
import { isAuthenticated } from '../middleware/auth.js';

const router = express.Router();

// Rutas de autenticación
router.get('/auth/google',
    passport.authenticate('google', {
        scope: ['profile', 'email']
    })
);

router.get('/auth/google/callback',
    passport.authenticate('google', { 
        failureRedirect: '/login-failed' 
    }),
    (req, res) => {
        // Autenticación exitosa
        res.redirect('/dashboard'); // O donde quieras redirigir
    }
);

// Ruta para verificar usuario actual
router.get('/api/current-user', (req, res) => {
    if (!req.user) {
        return res.status(401).json({ error: 'No autenticado' });
    }
    res.json(req.user);
});

// Ruta para cerrar sesión
router.get('/api/logout', (req, res) => {
    req.logout(function(err) {
        if (err) { return next(err); }
        res.redirect('/');
    });
});

router.get('/dashboard', isAuthenticated, (req, res) => {
    res.json({ user: req.user });
});

router.get('/', (req, res) => {
    res.send({message : "Hello from Express!"});
})

export default router;

auth.js
// Middleware para verificar si el usuario está autenticado
export const isAuthenticated = (req, res, next) => {
    if (req.isAuthenticated()) {
        return next();
    }
    res.status(401).json({ error: 'No autorizado - Inicia sesión primero' });
};

// Middleware para verificar si el usuario NO está autenticado (útil para rutas de login)
export const isNotAuthenticated = (req, res, next) => {
    if (!req.isAuthenticated()) {
        return next();
    }
        res.redirect('/dashboard'); // Redirecciona si ya está autenticado
    };


passport.js
import passport from 'passport';
import { Strategy as GoogleStrategy } from 'passport-google-oauth20';
import db from '../db/connection.js';

// Serialización
passport.serializeUser((user, done) => {
    done(null, user._id);
});

// Deserialización
passport.deserializeUser(async (id, done) => {
    try {
        const user = await db.collection('users').findOne({ _id: id });
        done(null, user);
    } catch (err) {
        done(err, null);
    }
});

passport.use(new GoogleStrategy({
    clientID: process.env.GOOGLE_CLIENT_ID,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    callbackURL: process.env.GOOGLE_CALLBACK_URL,
    proxy: true
},
async (accessToken, refreshToken, profile, done) => {
    try {
        const existingUser = await db.collection('users').findOne({ googleId: profile.id });
        if (existingUser) {
            return done(null, existingUser);
        }
        const newUser = {
            googleId: profile.id,
            email: profile.emails[0].value,
            boards: [],
            favorites: [],
            createdAt: new Date(),
        };
        const result = await db.collection('users').insertOne(newUser);
        newUser._id = result.insertedId;
        done(null, newUser);
    } catch (err) {
        done(err, null);
    }
}
));


export default passport;


entonces, lo que quiero es añadir el botónd e login con google en mi frontend, cómo puedo hacerlo? Los archivos principales son estos, las rutas funcionan bien:
app.jsx:
import { useState, useEffect } from "react";
import { Routes, Route } from "react-router";

import Home from "./pages/Home.jsx";
import Login from "./pages/Login.jsx";
import AuthProvider from "./components/AuthProvider.jsx";
import ProtectedRoute from "./components/ProtectedRoute.jsx";

function	App() {
  return (
		<AuthProvider>
			<Routes>
				<Route path="/" element={<ProtectedRoute><Home/></ProtectedRoute>} />
				<Route path="/login" element={<Login/>} />
			</Routes>
		</AuthProvider>
  );
}

export default App;

home.jsx:
import Logout from "../components/Logout.jsx";

function	Home() {
	return (
		<>
			<h1> Home </h1>
			<Logout/>
		</>
	);
}

export default Home;


login.jsx:
//import { Link } from "react-router";

import useAuth from "../hooks/useAuth.jsx";

function	Login() {
	const	{ login } = useAuth();

	const	handleLogin = () => {
		login();
		return ;
	}

	return (
		<>
			<img className="w-24 h-24" src="/logo.svg"/>
			<button onClick={handleLogin}>Sign in with Google</button>
		</>
	);
}

export default Login;


Si necesitas documentacion de algún blog para ver como se aplica el login en google, dímelo.
